const fs = require('fs');
const path = require('path');
const favicon = require('serve-favicon');
const compression = require('compression');
const cors = require('cors');
const helmet = require('helmet');
const logger = require('winston');

const feathers = require('@feathersjs/feathers');
const configuration = require('@feathersjs/configuration');
const express = require('@feathersjs/express');
const auth = require('@feathersjs/authentication');

const resolveRoot = resource => path.resolve(__dirname, '../', resource)

const isProd = process.env.NODE_ENV === 'production'

const middleware = require('./middleware');
const services = require('./services');
const appHooks = require('./app.hooks');
const channels = require('./channels');

const authentication = require('./authentication');

const app = express(feathers());

// Load app configuration
app.configure(configuration());
// Enable CORS, security, compression, favicon and body parsing
app.use(cors());
app.use(helmet());
app.use(compression({ threshold: 0 }));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Set up Plugins and providers
app.configure(express.rest());


// Configure other middleware (see `middleware/index.js`)
app.configure(middleware);
app.configure(authentication);
// Set up our services (see `services/index.js`)
app.configure(services);
// Set up event channels (see channels.js)
app.configure(channels);

let renderer
if (isProd) {
  // In production: create server renderer using server bundle and index HTML
  // template from real fs.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  // const bundle = require('./dist/vue-ssr-bundle.json')
  const bundle = require(resolveRoot('dist/vue-ssr-bundle.json'));
  // src/index.template.html is processed by html-webpack-plugin to inject
  // build assets and output as dist/index.html.
  // const template = fs.readFileSync(resolve('./dist/index.html'), 'utf-8')
  const template = fs.readFileSync(resolveRoot('dist/index.html'), 'utf-8')
  renderer = createRenderer(bundle, template)
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  require(resolveRoot('build/dev-server'))(app, (bundle, template) => {
    renderer = createRenderer(bundle, template)
  })
}

function createRenderer (bundle, template) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    template,
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

const serve = (reqpath, cache) => express.static(resolveRoot(reqpath), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})

// Host the public folder
app.use('/', express.static(app.get('public')));
app.use('/dist', serve('dist', true))
app.use(favicon(resolveRoot('static/logo-48.png')))
app.use('/service-worker.js', serve('dist/service-worker.js'))

/* Custom Express routes */
// sub app route
app.use('/api',function(req, res, next) {
  require(resolveRoot('api-server/app'))(req, res, next);
});
// unprotected json route
app.get('/unprotected', (req, res, next) => {
  res.json({ success: true });
});
// jwt protected route
app.get('/protected', auth.express.authenticate('jwt'), (req, res, next) => {
  res.json({ success: true });
});
// route needs to be protected but needs passed token
app.get('/intra', (req, res, next) => {
  res.json({ success: true });
});
app.get('/login', (req, res, next) => {
  res.json({ success: false });
});

// Custom route with custom redirects
app.post('/login',
  auth.express.authenticate('local',{
    successRedirect: '/intra',
    failureRedirect: '/login'
  })
);

app.get('*', (req, res) => {
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  const s = Date.now()

  res.setHeader("Content-Type", "text/html")

  const errorHandler = err => {
    if (err && err.code === 404) {
      res.status(404).end('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err)
    }
  }

  renderer.renderToStream({ url: req.url })
    .on('error', errorHandler)
    .on('end', () => console.log(`whole request: ${Date.now() - s}ms`))
    .pipe(res)
})
// Configure a middleware for 404s and the error handler
app.use(express.notFound());
app.use(express.errorHandler({ logger }));

app.hooks(appHooks);

module.exports = app;
